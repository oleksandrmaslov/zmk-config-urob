#include <behaviors.dtsi>
#include <behaviors/num_word.dtsi> // requires auto-layer module
#include <dt-bindings/zmk/keys.h>
#ifdef CONFIG_WIRELESS
    #include <dt-bindings/zmk/bt.h>
    #include <dt-bindings/zmk/outputs.h>
    #define _BT_SEL_KEYS_ &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR
#else
    #define _BT_SEL_KEYS_ &trans &trans &trans &trans &trans
#endif

#include "zmk-helpers/helper.h"
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    macros {
        lang: lang {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LS(LEFT_SHIFT))>;
            label = "LANG";
        };
    };

    behaviors {
        new_behavior: new_behavior {
            compatible = "zmk,behavior-hold-tap";
            label = "NEW_BEHAVIOR";
            #binding-cells = <2>;
            hold-trigger-key-positions = <13 14 15 16 19 21 20 22>;
            flavor = "tap-preferred";
            bindings = <&mt>, <&kp>;

            tapping-term-ms = <150>;
            quick-tap-ms = <100>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q           &kp W           &kp E                 &kp R             &kp T          &kp Y        &kp U             &kp I         &kp O                 &mt SQT P               &none
&none  &mt LEFT_WIN A  &mt LEFT_ALT S  &mt LCTRL D           &mt LEFT_SHIFT F  &kp G          &kp H        &mt LEFT_SHIFT J  &mt LCTRL K   &mt LEFT_ALT L        &mt LEFT_WIN SEMI       &none
&none  &kp Z           &kp X           &kp C                 &kp V             &kp B          &kp N        &kp M             &kp COMMA     &mt LEFT_BRACKET DOT  &mt RIGHT_BRACKET FSLH  &none
                                       &lt 1 LA(LEFT_SHIFT)  &lt 2 TAB         &lt 3 SPACE    &lt 4 ENTER  &kp BACKSPACE     &lt 5 ESCAPE
            >;

            label = "Base";
        };

        Media {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &bt BT_CLR    &kp PRINTSCREEN   &none           &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &trans        &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans        &none             &kp C_PREVIOUS  &kp C_VOLUME_DOWN     &kp C_VOLUME_UP       &kp C_NEXT    &trans
&trans  &trans    &trans    &trans     &trans     &trans        &bt BT_SEL 0      &bt BT_SEL 1    &bt BT_SEL 2          &bt BT_SEL 3          &bt BT_SEL 4  &trans
                            &trans     &trans     &trans        &kp C_PLAY_PAUSE  &kp C_STOP      &kp C_MUTE
            >;

            label = "Media";
        };

        Move {
            bindings = <
&none  &none      &none      &none      &none      &kp PRINTSCREEN    &none   &none     &none          &none        &kp DELETE  &none
&none  &kp LGUI   &kp LALT   &kp LCTRL  &kp LSHFT  &none              &none   &kp LEFT  &kp DOWN       &kp UP       &kp RIGHT   &none
&none  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LG(V)  &kp LC(Y)          &none   &kp HOME  &kp PAGE_DOWN  &kp PAGE_UP  &kp END     &none
                             &trans     &trans     &trans             &trans  &trans    &trans
            >;

            label = "Move";
        };

        Number {
            bindings = <
&none  &kp N1    &kp N2    &kp N3     &kp N4     &kp N5    &kp N6  &kp N7     &kp N8     &kp N9    &kp N0    &none
&none  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &none     &none   &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &none
&none  &none     &none     &none      &none      &none     &none   &none      &none      &none     &none     &none
                           &trans     &trans     &trans    &trans  &trans     &trans
            >;

            label = "Num";
        };

        Symbol {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &none
&none  &none     &none   &none     &none     &kp TILDE    &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &none
&none  &none     &none   &none     &none     &none        &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &none
                         &trans    &trans    &trans       &trans     &trans     &trans
            >;

            label = "Sym";
        };

        Function {
            bindings = <
&none  &kp F1  &kp F2   &kp F3   &kp F4   &none     &none   &none      &none      &none     &studio_unlock    &none
&none  &kp F5  &kp F6   &kp F7   &kp F8   &none     &none   &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &none
&none  &kp F9  &kp F10  &kp F11  &kp F12  &none     &none   &none      &none      &none     &none     &none
                        &trans   &trans   &trans    &trans  &trans     &trans
            >;

            label = "Fun";
        };
    };
};
